<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.cloud</groupId>
	<artifactId>dolphin</artifactId>
	<name>${project.artifactId}</name>
	<version>1.0.0</version>
	<packaging>pom</packaging>

	<url>https://godolphinx.org</url>
	<description>海豚生态计划-海豚开发平台生态圈</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<spring-boot.version>2.6.3</spring-boot.version>
		<spring-cloud.version>2021.0.1</spring-cloud.version>
		<spring-cloud-alibaba.version>2021.1</spring-cloud-alibaba.version>
		<spring-boot-admin.version>2.6.2</spring-boot-admin.version>
		<hutool.version>5.7.19</hutool.version>
		<dynamic-ds.version>3.4.1</dynamic-ds.version>
		<jasypt.version>2.1.0</jasypt.version>
		<swagger.fox.version>3.0.0</swagger.fox.version>
		<knife4j.version>2.0.9</knife4j.version>
		<xxl-job.version>2.3.0</xxl-job.version>
		<git.commit.plugin>4.9.9</git.commit.plugin>
		<spring.checkstyle.plugin>0.0.29</spring.checkstyle.plugin>
		<docker.plugin.version>0.32.0</docker.plugin.version>
		<docker.host>https://xxx.xxx.xxx.xxx:8062</docker.host>
		<docker.certPath>/usr/local/CA</docker.certPath>
	</properties>

	<!-- 以下依赖 全局所有的模块都会引入  -->
	<dependencies>
		<!--bootstrap 启动器-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>
		<!--配置文件处理器-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!--配置文件加解密-->
		<dependency>
			<groupId>com.github.ulisesbocchio</groupId>
			<artifactId>jasypt-spring-boot-starter</artifactId>
			<version>${jasypt.version}</version>
		</dependency>
		<!--监控-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--监控客户端-->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>${spring-boot-admin.version}</version>
		</dependency>
		<!--Lombok-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<!--测试依赖-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--mybatis-generator-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
			<scope>provided</scope>
		</dependency>
		<!--velocity模板引擎生成简单crud代码-->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<modules>
		<module>dolphin-register</module>
		<module>dolphin-gateway</module>
		<module>dolphin-auth</module>
		<module>dolphin-platform</module>
		<module>dolphin-common</module>
		<module>dolphin-visual</module>
		<module>dolphin-common-demo</module>

    </modules>

	<dependencyManagement>
		<dependencies>
			<!--dolphin 公共版本定义-->
			<dependency>
				<groupId>com.cloud</groupId>
				<artifactId>dolphin-common-bom</artifactId>
				<version>${project.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- spring boot 依赖 -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- spring cloud 依赖 -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- spring cloud alibaba 依赖 -->
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>${spring-cloud-alibaba.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.name}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<!--构建Docker映像和管理用于集成测试的容器工具-->
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${docker.plugin.version}</version>
					<configuration>
						<!--Docker远程地址-->
						<dockerHost>${docker.host}</dockerHost>
						<!--Docker连接证书-->
						<certPath>${docker.certPath}</certPath>
						<images>
							<image>
								<!--镜像名称-->
								<name>${project.name}</name>
								<build>
									<dockerFile>${project.basedir}/Dockerfile</dockerFile>
								</build>
							</image>
						</images>
					</configuration>
				</plugin>
				<!--spring-boot打包插件,内部会根据springboot的规则打包,让jar可以直接启动-->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot.version}</version>
					<configuration>
						<finalName>${project.build.finalName}</finalName>
						<!--启用分层打包支持-->
						<layers>
							<enabled>true</enabled>
						</layers>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!--maven打包插件(打jar包会在classes生成git.properties文件包含了目前git相关信息方便查看git环境错误)-->
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<version>${git.commit.plugin}</version>
				<executions>
					<!--打包初始化阶段生成git相关信息-->
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
						<phase>initialize</phase>
					</execution>
				</executions>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<!--因为项目定制了jackson的日期时间序列化/反序列化格式，因此这里要进行配置,不然通过management.info.git.mode=full进行完整git信息监控时会存在问题-->
					<dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
					<includeOnlyProperties>
						<includeOnlyProperty>^git.build.(time|version)$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.(id|message|time).*$</includeOnlyProperty>
					</includeOnlyProperties>
				</configuration>
			</plugin>
			<!--代码格式插件,默认使用spring 规则,跟前端EsLine一样保证代码规范-->
			<plugin>
				<groupId>io.spring.javaformat</groupId>
				<artifactId>spring-javaformat-maven-plugin</artifactId>
				<version>${spring.checkstyle.plugin}</version>
			</plugin>
		</plugins>
	</build>

	<!--声明环境标识,方便yml配置环境作用域调用,可以指定调用配置,设置activeByDefault-->
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<!-- 环境标识，需要与配置文件的名称相对应 -->
				<profiles.namespace>dolphin-dev</profiles.namespace>
				<profiles.group>DEV-GROUP</profiles.group>
				<profiles.ip>123.60.163.167</profiles.ip>
			</properties>
			<activation>
				<!-- 默认环境 -->
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<!-- 环境标识，需要与配置文件的名称相对应 -->
				<profiles.namespace>dolphin-prod</profiles.namespace>
				<profiles.group>PROD-GROUP</profiles.group>
				<profiles.ip>xxx.xxx.xxx.xxx</profiles.ip>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<!-- 环境标识，需要与配置文件的名称相对应 -->
				<profiles.namespace>dolphin-test</profiles.namespace>
				<profiles.group>TEST-GROUP</profiles.group>
				<profiles.ip>xxx.xxx.xxx.xxx</profiles.ip>
			</properties>
		</profile>
	</profiles>
</project>
